package mod.mcreator;

import net.minecraftforge.fml.relauncher.SideOnly;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.common.registry.ForgeRegistries;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;

import net.minecraft.world.gen.feature.WorldGenMinable;
import net.minecraft.world.World;
import net.minecraft.world.IBlockAccess;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.Item;
import net.minecraft.init.Items;
import net.minecraft.init.Blocks;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.client.Minecraft;
import net.minecraft.block.state.IBlockState;
import net.minecraft.block.material.Material;
import net.minecraft.block.SoundType;
import net.minecraft.block.Block;

import java.util.Random;

public class mcreator_test {

	public mcreator_test() {
	}

	public static BlockTest block;

	public static Item item;

	public static Object instance;

	public int addFuel(ItemStack fuel) {
		return 0;
	}

	public void serverLoad(FMLServerStartingEvent event) {
	}

	public void preInit(FMLPreInitializationEvent event) {
		block.setRegistryName("test");
		ForgeRegistries.BLOCKS.register(block);
		item = new ItemBlock(block).setRegistryName(block.getRegistryName());
		ForgeRegistries.ITEMS.register(item);
	}

	public void registerRenderers() {
	}

	public void load(FMLInitializationEvent event) {
		if (event.getSide() == Side.CLIENT) {
			Minecraft.getMinecraft().getRenderItem().getItemModelMesher()
					.register(item, 0, new ModelResourceLocation("testenvironmentmod:test", "inventory"));
		}

		GameRegistry.addShapedRecipe(new ResourceLocation("testenvironmentmod:test"), new ResourceLocation("custom"), new ItemStack(item, 1),
				new Object[]{"012", "345", "678", Character.valueOf('0'), Blocks.STONE, Character.valueOf('1'), Items.ARROW, Character.valueOf('2'),
						Blocks.STONE, Character.valueOf('3'), Blocks.LAPIS_BLOCK, Character.valueOf('4'), Blocks.STONE, Character.valueOf('5'),
						Blocks.LAPIS_BLOCK, Character.valueOf('6'), Blocks.STONE, Character.valueOf('7'), Items.ARROW, Character.valueOf('8'),
						Blocks.STONE,});
	}

	static {

		block = (BlockTest) (new BlockTest().setHardness(2.0F).setResistance(10.0F).setLightLevel(0.05F).setUnlocalizedName("Test")
				.setLightOpacity(0).setCreativeTab(mcreator_moreblocks.tab));
		block.setHarvestLevel("pickaxe", 4);
	}

	public void generateSurface(World world, java.util.Random rand, int chunkX, int chunkZ) {
		for (int i = 0; i < 30; i++) {
			int randPosX = chunkX + rand.nextInt(16);
			int randPosY = rand.nextInt(100) + 10;
			int randPosZ = chunkZ + rand.nextInt(16);
			(new WorldGenMinable(mcreator_test.block.getDefaultState(), 16)).generate(world, rand, new BlockPos(randPosX, randPosY, randPosZ));
		}
	}

	public void generateNether(World world, Random random, int chunkX, int chunkZ) {
	}

	static class BlockTest extends Block {

		int a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 0, a6 = 0;

		boolean red = false;

		protected BlockTest() {
			super(Material.GROUND);

			setSoundType(SoundType.WOOD);

		}

		@Override
		public void onBlockAdded(World world, BlockPos pos, IBlockState state) {
			int i = pos.getX();
			int j = pos.getY();
			int k = pos.getZ();
			world.scheduleUpdate(new BlockPos(i, j, k), this, this.tickRate(world));

		}

		@Override
		public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
			return red ? 15 : 0;
		}

		@Override
		public int getStrongPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
			return red ? 15 : 0;
		}

		@SideOnly(Side.CLIENT)
		@Override
		public BlockRenderLayer getBlockLayer() {
			return BlockRenderLayer.SOLID;
		}

		@Override
		public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
			return new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 1.0D);
		}

		@Override
		public int tickRate(World world) {
			return 10;
		}

		@Override
		public int quantityDropped(Random par1Random) {
			return 1;
		}

	}
}
